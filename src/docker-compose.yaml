# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

name: osmspliter
version: '3.9'

services:
  spliter:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - data_protobuf:/app/src/PROTOBUF/PROTOBUF
      - data_osm:/app/src/OSMs
      - data_geojson:/app/src/Modules/UFs/GeoJsons
      - data_shapfile:/app/src/Modules/UFs/Shapfile
      - data_zipfile:/app/src/Modules/UFs/Zipfile
      - data_osmconvert:/app/src/Modules/OSMTools/bin
    env_file:
      - .env
    command: >
      bash -c "rm -rf osm2pgrouting &&
               git clone https://github.com/pgRouting/osm2pgrouting.git && 
               mkdir temp && 
               cp ./osm2pgrouting/*.xml temp &&
               rm -rf osm2pgrouting &&
               mv temp osm2pgrouting &&
               su && apt update && apt list --upgradable && apt -f install && dpkg --configure -a && apt-get install osmium-tool &&
               cd ./Modules/OSMTools/bin  &&
               chmod +x ./osmconvert64 &&
               cd .. &&
               cd .. &&
               cd .. &&
               python Main.py"

volumes:
  data_osm:
  data_geojson: 
  data_protobuf:
  data_shapfile:
  data_zipfile:
  data_osmconvert:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

